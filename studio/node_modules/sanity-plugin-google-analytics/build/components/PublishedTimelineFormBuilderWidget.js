"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _formBuilder = require("part:@sanity/form-builder");

var _CoreWidget = _interopRequireDefault(require("./CoreWidget"));

var _configGoogleAnalyticsPlugin = _interopRequireDefault(require("config:google-analytics-plugin"));

var _reactGoogleCharts = require("react-google-charts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function loadScript(url) {
  return new Promise((resolve, reject) => {
    const js = document.createElement('script');
    const fs = document.getElementsByTagName('script')[0];
    js.src = url;
    fs.parentNode.insertBefore(js, fs);
    js.onload = resolve;
    js.onerror = reject;
  });
}

let gvizLoadPromise = null;

const loadGviz = () => {
  return gvizLoadPromise || (gvizLoadPromise = new Promise((resolve, reject) => {
    loadScript('https://www.gstatic.com/charts/loader.js').then(() => {
      google.charts.load('current', {
        'packages': ['corechart']
      });
      google.charts.setOnLoadCallback(resolve);
    }, reject);
  }));
};

const TEST_OPTIONS = {
  // reportType: 'ga',
  query: {
    ids: _configGoogleAnalyticsPlugin.default.views,
    output: 'dataTable',
    dimensions: 'ga:date',
    metrics: 'ga:bounceRate, ga:bounces, ga:pageViews',
    'start-date': '30daysAgo',
    'end-date': 'yesterday'
  }
};

class PublishedTimelineFormBuilderWidget extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      dataTable: undefined
    });

    _defineProperty(this, "handleLoggedIn", event => {
      const _this$props = this.props,
            type = _this$props.type,
            document = _this$props.document; // Query parameters 
      // https://developers.google.com/analytics/devguides/reporting/core/v3/reference#q_summary
      // Component reference
      // https://developers.google.com/analytics/devguides/reporting/embed/v1/component-reference

      const report = new gapi.analytics.report.Data(TEST_OPTIONS);
      report.on('success', response => {
        console.log('analyticsDataTable', response.dataTable); // Google datatable

        const googleDataTable = new google.visualization.DataTable(response.dataTable);
        googleDataTable.addColumn({
          type: 'string',
          role: 'annotation'
        });
        googleDataTable.addColumn({
          type: 'string',
          role: 'annotationText'
        });
        googleDataTable.setCell(10, 4, 'Published');
        googleDataTable.setCell(10, 5, 'Published text');
        console.log('googleDataTable', googleDataTable); //this.setState({dataTable: response.dataTable})

        this.setState({
          dataTable: {
            cols: googleDataTable.vg,
            rows: googleDataTable.wg
          }
        });
      });
      report.execute();
    });

    _defineProperty(this, "handleSelect", (_ref) => {
      let chartWrapper = _ref.chartWrapper;
      const chart = chartWrapper.getChart();
      const selection = chart.getSelection();

      if (selection.length === 1) {
        const _selection = _slicedToArray(selection, 1),
              selectedItem = _selection[0];

        const dataTable = chartWrapper.getDataTable();
        const row = selectedItem.row,
              column = selectedItem.column;
        alert('You selected: Look up in history' + JSON.stringify({
          row,
          column,
          value: dataTable.getValue(row, column)
        }), null, 2);
      }

      console.log(selection);
    });

    _defineProperty(this, "addPublished", data => {
      return data;
    });
  }

  componentDidMount() {
    loadGviz();
  }

  render() {
    const _this$props2 = this.props,
          type = _this$props2.type,
          level = _this$props2.level,
          document = _this$props2.document;
    const dataTable = this.state.dataTable;
    const _type$options = type.options,
          options = _type$options === void 0 ? {} : _type$options;
    console.log('render dataTable:', dataTable);
    return _react.default.createElement(_default2.default, {
      level: level,
      legend: type.title,
      description: type.description
    }, options && options.gaConfig ? _react.default.createElement(_CoreWidget.default, {
      onLoggedIn: this.handleLoggedIn
    }, dataTable && _react.default.createElement(_reactGoogleCharts.Chart, {
      chartType: "LineChart",
      data: dataTable,
      width: "100%",
      height: "400px",
      legendToggle: true,
      options: {
        annotations: {
          style: 'line'
        }
      },
      chartEvents: [{
        eventName: 'select',
        callback: this.handleSelect
      }]
    })) : _react.default.createElement("p", null, "Use ", _react.default.createElement("code", null, "gaConfig"), " on ", _react.default.createElement("options", null, "options"), " to config your google analytics widget"));
  }

}

var _default = (0, _formBuilder.withDocument)(PublishedTimelineFormBuilderWidget);

exports.default = _default;