"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withAnalyticsAuth;

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _reactDebounceRender = _interopRequireDefault(require("react-debounce-render"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _configGoogleAnalyticsPlugin = _interopRequireDefault(require("config:google-analytics-plugin"));

var _GoogleMaterialDataChart = _interopRequireDefault(require("./GoogleMaterialDataChart"));

var _GoogleProvider = _interopRequireDefault(require("./GoogleProvider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const initGoogleAPI = () => {
  // Check that the google api is not initialized before
  if (typeof window !== 'undefined' && typeof gapi === 'undefined') {
    // eslint-disable-next-line max-params
    ;

    (function (w, d, s, g, js, fjs) {
      g = w.gapi || (w.gapi = {});
      g.analytics = {
        q: [],

        ready(cb) {
          this.q.push(cb);
        }

      };
      js = d.createElement(s);
      fjs = d.getElementsByTagName(s)[0];
      js.src = 'https://apis.google.com/js/platform.js';
      fjs.parentNode.insertBefore(js, fjs);

      js.onload = function () {
        g.load('analytics');
      };
    })(window, document, 'script');
  }
};

function withAnalyticsAuth(Component, data) {
  return class extends _react.default.Component {
    componentDidMount() {
      initGoogleAPI();
    }

    render() {
      const _this$props = this.props,
            type = _this$props.type,
            level = _this$props.level,
            clientId = _this$props.clientId,
            views = _this$props.views,
            children = _this$props.children,
            config = _this$props.config;

      if (typeof window == 'undefined' || typeof gapi === 'undefined') {
        return _react.default.createElement("div", null);
      }

      if (!_configGoogleAnalyticsPlugin.default) {
        return _react.default.createElement("p", null, "Please add ", _react.default.createElement("code", null, "google-analytics-plugin.json"), " to your config folder");
      }

      return _react.default.createElement(_GoogleProvider.default, {
        clientId: _configGoogleAnalyticsPlugin.default.clientId,
        onLoggedIn: this.props.onLoggedIn
      }, _react.default.createElement(Component, _extends({}, this.props, {
        views: views || _configGoogleAnalyticsPlugin.default.views
      })));
    }

  };
}