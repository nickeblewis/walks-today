"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withAnalyticsData;

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _configGoogleAnalyticsPlugin = _interopRequireDefault(require("config:google-analytics-plugin"));

var _withAnalyticsAuth = _interopRequireDefault(require("./withAnalyticsAuth"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _GoogleProvider = _interopRequireDefault(require("./GoogleProvider"));

var _CoreWidget = _interopRequireDefault(require("./CoreWidget"));

var _Loading = _interopRequireDefault(require("./Loading"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function withAnalyticsData(Component, data) {
  var _temp;

  return _temp = class extends _react.default.Component {
    constructor() {
      super(...arguments);

      _defineProperty(this, "_interval", undefined);

      _defineProperty(this, "state", {
        data: undefined,
        config: undefined
      });

      _defineProperty(this, "loadChart", () => {
        const config = this.props.config;

        if (!config || typeof window === 'undefined' || typeof gapi === 'undefined' || typeof gapi.analytics === 'undefined' || typeof gapi.analytics.report === 'undefined') {
          console.error('Missing gapi analytics');
          return false;
        }

        clearInterval(this._interval);

        const newConfig = _objectSpread({}, config, {
          query: _objectSpread({}, config.query, {
            output: config.query.output || 'json',
            ids: this.props.views || _configGoogleAnalyticsPlugin.default.views
          })
        });

        const report = new gapi.analytics.report.Data({
          query: newConfig.query
        });
        report.on('success', res => {
          if (this.state.data && this.state.isLoaded) {
            return;
          }

          this.setState({
            // data: res.dataTable || res.rows,
            data: res.rows,
            config: newConfig,
            isLoaded: true
          });
        });
        report.execute();
      });

      _defineProperty(this, "handleSelect", event => {
        const gaConfig = this.props.gaConfig;
        const chartWrapper = event.chartWrapper;
        const chart = chartWrapper.getChart();
        const selection = chart.getSelection();

        if (selection.length === 1) {
          const _selection = _slicedToArray(selection, 1),
                selectedItem = _selection[0];

          const dataTable = this.state.dataTable;
          const row = selectedItem.row,
                column = selectedItem.column;
          let cell = undefined;

          if (typeof row === 'number' && typeof column === 'number') {
            cell = dataTable.rows[row].c[column].v;
          } else if (typeof row === 'number' && typeof column !== 'number') {
            cell = dataTable.rows[row];
          }

          if (gaConfig.onSelect) {
            gaConfig.onSelect(selectedItem, cell, event);
          }
        }
      });
    }

    componentDidMount() {
      this._interval = setInterval(this.loadChart, 100);
    }

    render() {
      const _this$state = this.state,
            data = _this$state.data,
            newConfig = _this$state.newConfig;
      const _this$props = this.props,
            type = _this$props.type,
            level = _this$props.level,
            clientId = _this$props.clientId,
            views = _this$props.views,
            children = _this$props.children,
            gaConfig = _this$props.gaConfig;
      return _react.default.createElement(_CoreWidget.default, null, data ? _react.default.createElement(Component, _extends({}, this.props, {
        data: data,
        onSelect: this.handleSelect
      })) : _react.default.createElement(_Loading.default, null));
    }

  }, _temp;
}