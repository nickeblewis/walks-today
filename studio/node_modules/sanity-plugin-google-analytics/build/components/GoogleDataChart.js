"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class GoogleDataChart extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "loadChart", () => {
      if (!this.props.config) {
        return;
      }

      const config = _objectSpread({}, this.props.config, {
        query: _objectSpread({}, this.props.config.query, {
          output: 'dataTable',
          ids: this.props.views
        }),
        chart: _objectSpread({}, this.props.config.chart, {
          options: _objectSpread({}, this.props.config.chart.options, {
            annotations: {
              style: 'point'
            }
          }),
          container: this.chartNode
        })
      });

      this.chart = new gapi.analytics.googleCharts.DataChart(config);
      this.chart.execute();
    });
  }

  componentDidMount() {
    this.loadChart();
  }

  componentWillUpdate() {
    this.loadChart();
  }

  render() {
    return _react.default.createElement("div", {
      className: this.props.className,
      style: this.props.style,
      ref: node => this.chartNode = node
    });
  }

}

exports.default = GoogleDataChart;