"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GoogleDataChart = exports.GoogleProvider = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// dont wait for auth twice, even after unmounts
let isLoaded = false; // wait for auth to display children

class GoogleProvider extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      ready: false
    });

    _defineProperty(this, "init", () => {
      const doAuth = () => {
        const authObj = this.props.accessToken ? {
          serverAuth: {
            access_token: this.props.accessToken
          }
        } : {
          clientid: this.props.clientId
        };
        gapi.analytics.auth && gapi.analytics.auth.authorize(_objectSpread({}, authObj, {
          container: this.authButtonNode
        }));
      };

      gapi.analytics.ready(a => {
        if (isLoaded) {
          this.setState({
            ready: true
          });
          return;
        }

        const authResponse = gapi.analytics.auth.getAuthResponse();

        if (!authResponse) {
          gapi.analytics.auth.on("success", response => {
            this.setState({
              ready: true
            });
          });
        } else {
          this.setState({
            ready: true
          });
        }

        doAuth();
      });
    });
  }

  componentDidMount() {
    this.init();
  }

  render() {
    return _react.default.createElement("div", null, this.props.clientId && _react.default.createElement("div", {
      ref: node => this.authButtonNode = node
    }), this.state.ready && this.props.children);
  }

}

exports.GoogleProvider = GoogleProvider;
GoogleProvider.propTypes = {
  clientId: _propTypes.default.string,
  accessToken: _propTypes.default.string
}; // single chart

class GoogleDataChart extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "loadChart", () => {
      const config = _objectSpread({}, this.props.config, {
        chart: _objectSpread({}, this.props.config.chart, {
          container: this.chartNode
        })
      });

      this.chart = new gapi.analytics.googleCharts.DataChart(config);
      console.log('chart', this.chart);
      this.chart.set(this.props.views).execute();
    });
  }

  componentDidMount() {
    this.loadChart();
  }

  componentWillUpdate() {
    this.loadChart();
  }

  componentWillUnmount() {// TODO: cleanup
  }

  render() {
    return _react.default.createElement("div", {
      className: this.props.className,
      style: this.props.style,
      ref: node => this.chartNode = node
    });
  }

}

exports.GoogleDataChart = GoogleDataChart;