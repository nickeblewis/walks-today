"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactGoogleCharts = require("react-google-charts");

var _configGoogleAnalyticsPlugin = _interopRequireDefault(require("config:google-analytics-plugin"));

var _Loading = _interopRequireDefault(require("./Loading"));

var _GoogleMaterialDataChart = _interopRequireDefault(require("./GoogleMaterialDataChart.css"));

var _router = require("part:@sanity/base/router");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function convertTypeToMaterial(chartType) {
  switch (chartType) {
    case 'LINE':
      return 'Line';

    case 'BAR':
      return 'Bar';

    case 'GEO':
      return 'GeoChart';

    case 'TABLE':
      return 'Table';

    case 'PIE':
      return 'Pie';
  }

  return chartType;
}

class GoogleMaterialDataChart extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      dataTable: undefined,
      config: undefined,
      isLoaded: false
    });

    _defineProperty(this, "loadChart", () => {
      const config = this.props.config;

      if (!config) {
        return;
      }

      const newConfig = _objectSpread({}, config, {
        query: _objectSpread({}, config.query, {
          output: 'dataTable',
          ids: this.props.views
        })
      });

      const report = new gapi.analytics.report.Data({
        query: newConfig.query
      });
      report.on('success', res => {
        if (this.state.isLoaded) {
          return;
        }

        this.setState({
          dataTable: res.dataTable,
          config: newConfig,
          isLoaded: true
        });
      });
      report.execute();
    });

    _defineProperty(this, "handleSelect", event => {
      const config = this.props.config;
      const chartWrapper = event.chartWrapper;
      const chart = chartWrapper.getChart();
      const selection = chart.getSelection();

      if (selection.length === 1) {
        const _selection = _slicedToArray(selection, 1),
              selectedItem = _selection[0];

        const dataTable = this.state.dataTable;
        const row = selectedItem.row,
              column = selectedItem.column;
        let cell = undefined;

        if (typeof row === 'number' && typeof column === 'number') {
          cell = dataTable.rows[row].c[column].v;
        } else if (typeof row === 'number' && typeof column !== 'number') {
          cell = dataTable.rows[row];
        }

        if (config.onSelect) {
          config.onSelect(selectedItem, cell, event, this.props.router);
        }
      }
    });
  }

  componentDidMount() {
    this.loadChart();
  }

  render() {
    const _this$state = this.state,
          dataTable = _this$state.dataTable,
          config = _this$state.config;

    if (!dataTable) {
      return _react.default.createElement(_Loading.default, {
        message: "Loading chart"
      });
    }

    const type = convertTypeToMaterial(config.chart.type || 'Line');

    if (type === 'Pie') {
      return _react.default.createElement("div", null, "Pie is not supported yet");
    } // Add custom labels from config to the dataTable


    if (type === 'Table' || type === 'TABLE') {
      if (config.chart && config.chart.labels) {
        Object.keys(config.chart.labels).map(i => {
          if (dataTable.cols[i] && config.chart.labels[i]) {
            dataTable.cols[i].label = config.chart.labels[i];
          }
        });
      }
    }

    return _react.default.createElement("div", {
      className: `${_GoogleMaterialDataChart.default.chart} ${config.onSelect ? _GoogleMaterialDataChart.default.chartWithOnSelect : _GoogleMaterialDataChart.default.chartWithoutOnSelect}`
    }, _react.default.createElement(_reactGoogleCharts.Chart, {
      chartType: type,
      data: dataTable,
      width: "100%",
      height: "400px",
      options: config.chart,
      mapsApiKey: _configGoogleAnalyticsPlugin.default.mapsApiKey,
      chartEvents: [{
        eventName: 'select',
        callback: this.handleSelect
      }]
    }));
  }

}

var _default = (0, _router.withRouterHOC)(GoogleMaterialDataChart);

exports.default = _default;